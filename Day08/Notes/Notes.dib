#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

public record Coord(int Row, int Col)
{
    public static Coord Zero => new(0, 0);

    public Coord Up => new(Row - 1, Col);
    public Coord Right => new(Row, Col + 1);
    public Coord Down => new(Row + 1, Col);
    public Coord Left => new(Row, Col - 1);

    public IEnumerable<Coord> Neighbours => [Up, Right, Down, Left];

    public static Coord operator +(Coord a, Coord b) => new(a.Row + b.Row, a.Col + b.Col);
    public static Coord operator -(Coord a, Coord b) => new(a.Row - b.Row, a.Col - b.Col);

    public int Manhattan(Coord other) => Math.Abs(Row - other.Row) + Math.Abs(Col - other.Col);

    public override string ToString() => $"[{Row}, {Col}]";
}

#!csharp

using System.IO;

string[] lines = File.ReadAllLines("../../Day08/example1.txt");
char[][] matrix = lines.Select(s => s.ToCharArray()).ToArray();

Coord first = new(9,9);
Coord second = new(8,8);


Coord diffCoord = first - second;
Coord before = diffCoord + first;
Coord after = second - diffCoord;

// diffCoord.Display();

while (WithinBounds(before))
{
    matrix[before.Row][before.Col] = 'X';
    before = diffCoord + before;
}

while (WithinBounds(after))
{
    matrix[after.Row][after.Col] = 'Z';
    after = after - diffCoord;
}

private bool WithinBounds(Coord c) => c.Row >= 0 && c.Row < lines.Length
                                   && c.Col >= 0 && c.Col < lines[0].Length;

matrix.Display();
