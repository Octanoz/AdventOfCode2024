#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

using System.Text;
using System.IO;

Dictionary<char, string> replacements = new()
{
    ['#'] = "##",
    ['O'] = "[]",
    ['.'] = "..",
    ['@'] = "@."
};

int maxRow, maxCol;

List<char[]> lines = [];
using (StreamReader sr = new(@"Day15/example2.txt"))
{
    StringBuilder sb = new();
    string line = sr.ReadLine();
    while (!String.IsNullOrEmpty(line))
    {
        char[] letterArray = new char[line.Length * 2];
        Queue<char> queue = [];
        foreach (var letter in line)
        {
            queue.Enqueue(letter);
        }

        for (int i = 1; i < letterArray.Length; i += 2)
        {
            char currentLetter = queue.Dequeue();
            if (replacements.TryGetValue(currentLetter, out string storedString))
            {
                letterArray[i - 1] = storedString[0];
                letterArray[i] = storedString[1];
            }
            else
            {
                Console.WriteLine($"No replacement for {currentLetter} in replacements");
                break;
            }
        }

        lines.Add(letterArray);

        line = sr.ReadLine();
    }
}

char[][] map = lines.ToArray();

map.Display();

#!csharp

Console.WriteLine($"|{Enumerable.Repeat(' ', 10).ToString()}|");
Console.Write('|');
Console.Write(new string(Enumerable.Repeat('.', 10).ToArray()));
Console.WriteLine('|');

#!csharp

using System.Text.RegularExpressions;

string[] test = ["p=0,4 v=3,-3", "p=6,3 v=-1,-3", "p=10,3 v=-1,2"];
for (int i = 0; i < test.Length; i++)
{
    string current = test[i];
    foreach (var s in Regex.Split(current, @"[^-\d]+"))
    {
        if (!String.IsNullOrEmpty((s)))
        {
            int num = int.Parse(s);
            Console.Write($"{num} ");
        }
    }

    Console.WriteLine();
}

foreach (string s in Regex.Split("Hello, world!", "[aeiou]"))
{
    Console.WriteLine($"Split: \"{s}\"");
}

#!csharp

public record Coord(int Row, int Col)
{
    public static Coord Zero => new(0, 0);

    public Coord Up => new(Row - 1, Col);
    public Coord Right => new(Row, Col + 1);
    public Coord Down => new(Row + 1, Col);
    public Coord Left => new(Row, Col - 1);

    public IEnumerable<Coord> Neighbours => [Up, Right, Down, Left];

    public static Coord operator +(Coord a, Coord b) => new(a.Row + b.Row, a.Col + b.Col);
    public static Coord operator -(Coord a, Coord b) => new(a.Row - b.Row, a.Col - b.Col);

    public int Manhattan(Coord other) => Math.Abs(Row - other.Row) + Math.Abs(Col - other.Col);

    public override string ToString() => $"[{Row}, {Col}]";
}

Coord[] someWalls = [new(5,3), new(8,3), new(12, 3)];

Coord testCoord = new(10,3);

var lastWallRow = someWalls.Where(wall => wall.Row < testCoord.Row).DefaultIfEmpty(Coord.Zero with { Col = testCoord.Col }).MaxBy(wall => wall.Row);

lastWallRow.Display();
