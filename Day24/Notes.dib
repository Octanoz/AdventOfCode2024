#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

BitArray bits = new(5);
bits[4] = true;

char[] charBits = new char[5];
for (int i = 0; i < 5; i++)
{
    Console.Write($"{bits[i]} ");
    charBits[i] = bits[i] ? '1' : '0';
}
Console.WriteLine("\n");

Array.Reverse(charBits);
Console.WriteLine($"CharBits array: [{String.Join(", ", charBits)}]");

int num = Convert.ToInt32(new string(charBits), 2);
Console.WriteLine($"Number: {num}");

int[] altNums = new int[1];
bits.CopyTo(altNums, 0);

Console.WriteLine($"Alternatively: {altNums[0]}");

#!csharp

public record struct Wire(string Name, int Value);

string[] wireStrings = ["x00: 1", "x01: 1", "x02: 1", "y00: 0", "y01: 1", "y02: 0"];

Wire[] wireArray = wireStrings.Select(s => s.Split(": ")).Select(arr => new Wire(arr[0], arr[1][0] - '0')).ToArray();

Array.ForEach(wireArray, w => Console.WriteLine($"[{w.Name}, {w.Value}]"));

long xValue = wireArray.Where(w => w.Name.StartsWith(('x'))).Sum(w => w.Value is 1 ? 1L << int.Parse(w.Name[1..]) : 0);

long yValue = wireArray.Where(w => w.Name.StartsWith('y')).Select(w => w.Value is 1 ? 1L << int.Parse(w.Name[1..]) : 0).Sum();

Console.WriteLine($"X: {xValue}\nY: {yValue}");

#!csharp

bool[] booleans = [true, true, false, true, false, true];

string binaryString = String.Join("", booleans.Select(b => b ? '1' : '0').Reverse());
string altBinaryString = new(booleans.Select(b => b ? '1' : '0').Reverse().ToArray());

Console.WriteLine($"Join: {binaryString}\nNew: {altBinaryString}");
