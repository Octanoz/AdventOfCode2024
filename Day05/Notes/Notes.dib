#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

string[] input =
[
"47|53",
"97|13",
"97|61",
"97|47",
"75|29",
"61|13",
"75|53",
"29|13",
"97|29",
"53|29",
"61|53",
"97|53",
"61|29",
"47|13",
"75|47",
"97|75",
"47|61",
"75|61",
"47|29",
"75|13",
"53|13",
"",
"75,47,61,53,29",
"97,61,53,29,13",
"75,29,13",
"75,97,47,61,53",
"61,13,29",
"97,13,75,29,47"
];

#!csharp

int splitIndex = Array.FindIndex(input, s => s == "");
string[] rules = input[..splitIndex];
string[] manuals = input[(splitIndex + 1)..];

#!csharp

rules.Display();
manuals.Display();

#!csharp

public class Node(int id)
{
    public int Id {get;} = id;
    public int Counter { get; set; } = 0;
}

Dictionary<int, Node> dict = new()
{
    [1] = new(1),
    [2] = new(2),
    [3] = new(3),
};

int[] ids = [1, 4, 2, 1, 4, 2];
foreach (var id in ids)
{
    // Node current = dict.TryGetValue(id, out var f) ? f : dict[id] = new(id);
    if (!dict.TryGetValue(id, out var current))
    {
        current = dict[id] = new(id);
    }
    current.Counter++;
    current.Display();
    System.Threading.Thread.Sleep(1000);
}

#!csharp

Dictionary<int, int> ruleCount = rules.SelectMany(arr => Array.ConvertAll(arr.Split('|'), int.Parse)).GroupBy(x => x).ToDictionary(g => g.Key, g => g.Count());

ruleCount.Display();
