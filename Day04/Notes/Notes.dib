#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

public record Coord(int Row, int Col)
{
    public static Coord Zero => new(0, 0);

    public Coord UpLeft => new(Row - 1, Col - 1);
    public Coord Up => new(Row - 1, Col);
    public Coord UpRight => new(Row - 1, Col + 1);
    public Coord Left => new(Row, Col - 1);
    public Coord Right => new(Row, Col + 1);
    public Coord DownLeft => new(Row + 1, Col - 1);
    public Coord Down => new(Row + 1, Col);
    public Coord DownRight => new(Row + 1, Col + 1);

    public IEnumerable<Coord> Neighbours => [UpLeft, Up, UpRight, Left, Right, DownLeft, Down, DownRight];

    public static Coord operator +(Coord a, Coord b) => new(a.Row + b.Row, a.Col + b.Col);
    public static Coord operator -(Coord a, Coord b) => new(a.Row - b.Row, a.Col - b.Col);

    public int Manhattan(Coord other) => Math.Abs(Row - other.Row) + Math.Abs(Col - other.Col);

    public override string ToString() => $"[{Row}, {Col}]";
}

public char[][] ResultGrid(Span<string> input, string target)
{
    char lastLetter = target[^1];
    int maxRow = input.Length;
    int maxCol = input[0].Length;

    char[][] matrix = Enumerable.Range(0, maxRow).Select(_ => Enumerable.Repeat('.', maxCol).ToArray()).ToArray();

    Queue<(Coord, Direction, List<Coord>)> finders = GetStartLetters(input, target, maxRow, maxCol);
    while (finders.Count is not 0)
    {
        var (current, currentDirection, currentList) = finders.Dequeue();
        char currentLetter = input[current.Row][current.Col];
        if (currentLetter == lastLetter)
        {
            for (int i = 0; i < currentList.Count; i++)
            {
                Coord point = currentList[i];
                matrix[point.Row][point.Col] = target[i];
            }
            
            continue;
        }

        char targetLetter = target[target.IndexOf(currentLetter) + 1];
        Coord nextCoord = current.Neighbours.Skip((int)currentDirection - 1).First();
        if (WithinBounds(nextCoord, maxRow, maxCol) && input[nextCoord.Row][nextCoord.Col] == targetLetter)
        {
            finders.Enqueue((nextCoord, currentDirection, [..currentList, nextCoord]));
        }
    }

    return matrix;

    
}

private bool WithinBounds(Coord c, int maxRow, int maxCol) => c.Row >= 0 && c.Row < maxRow && c.Col >= 0 && c.Col < maxCol;

private Queue<(Coord, Direction, List<Coord>)> GetStartLetters(Span<string> input, string target, int maxRow, int maxCol)
{
    Queue<(Coord, Direction, List<Coord>)> queue = [];
    for (int i = 0; i < input.Length; i++)
    {
        int index = input[i].IndexOf(target[0]);
        while (index is not -1)
        {
            Coord coord = new(i, index);
            ExploreAllDOF(input, coord, 'M');
            index = input[i].IndexOf(target[0], index + 1);
        }
    }

    return queue;

    void ExploreAllDOF(Span<string> input, Coord coord, char targetLetter)
    {
        foreach (var neighbour in coord.Neighbours)
        {
            if (WithinBounds(neighbour, maxRow, maxCol) && input[neighbour.Row][neighbour.Col] == targetLetter)
            {
                ReadOnlySpan<Coord> neighbourSpan = coord.Neighbours.ToArray();
                Direction currentDirection = (Direction)(neighbourSpan.IndexOf(neighbour) + 1);
                queue.Enqueue((coord, currentDirection, [coord]));
            }
        }
    }
}

public enum Direction
{
    None,
    UpLeft,
    Up,
    UpRight,
    Left,
    Right,
    DownLeft,
    Down,
    DownRight
}

#!csharp

string[] inputGrid =
[
    "MMMSXXMASM",
    "MSAMXMSMSA",
    "AMXSXMAAMM",
    "MSAMASMSMX",
    "XMASAMXAMM",
    "XXAMMXXAMA",
    "SMSMSASXSS",
    "SAXAMASAAA",
    "MAMMMXMMMM",
    "MXMXAXMASX"
];

string[] expectedGrid =
[
    "....XXMAS.",
    ".SAMXMS...",
    "...S..A...",
    "..A.A.MS.X",
    "XMASAMX.MM",
    "X.....XA.A",
    "S.S.S.S.SS",
    ".A.A.A.A.A",
    "..M.M.M.MM",
    ".X.X.XMASX"
];

#!csharp

char[][] result = ResultGrid(inputGrid, "XMAS");

#!csharp

char[][] consolidated = result.Select((arr, i) => arr = [..arr, '|', ..expectedGrid[i].ToCharArray()]).ToArray();

Array.ForEach(consolidated, arr => Console.WriteLine(String.Join(" ", arr)));
