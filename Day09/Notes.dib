#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

using System.IO;

string sequence = File.ReadAllText(@"example1.txt");

int[] intSequence = sequence.Select(c => c - '0').ToArray();
int fileId = 0;
StringBuilder sb = new();
for (int i = 0; i < sequence.Length; i++)
{
    if (i % 2 is 0)
    {
        sb.Append((char)(fileId + '0'), intSequence[i]);
        fileId++;
        continue;
    }

    sb.Append('.', intSequence[i]);
}

string decompressed = sb.ToString();
decompressed.Display();

int[] result = sb.ToString().Replace(".", "/").Select(c => c - '0').ToArray();

sequence.Display();
result.Display();

#!csharp

using System.Text.RegularExpressions;

int fileId = 0;
List<int[]> fileBlocks = [];
foreach (Match match in Regex.Matches(decompressed, @"(?<file>(\d)\1{0,})|(?<free>(\.+))"))
{
    if (match.Groups["file"].Success)
    {
        fileBlocks.Add(Enumerable.Repeat(fileId, match.Value.Length).ToArray());
        fileId++;
        continue;
    }

    fileBlocks.Add(Enumerable.Repeat(-1, match.Length).ToArray());
}

fileBlocks.Display();

#!csharp

static bool IsEmpty(int[] arr) => Array.TrueForAll(arr, n => n is -1);

int left = 0;
int currentId = 0;
for (int i = fileBlocks.Count - 1; i >= 0; i--)
{
    for (int j = 0; j < GetBlocksFileId(fileBlocks, i).Length; j++)
    {
        int emptyLength = -1;
        int right = GetBlocksFileId(fileBlocks, i)[j];
        if (j is 0)
        {
            currentId = fileBlocks[right][0];
        }

        if (j > 0 && fileBlocks[right][0] != currentId)
        {
            throw new ArgumentException($"Expected to iterate over all {currentId} arrays but current array has {fileBlocks[right][0]} as ID.");
        }

        int fileLength = fileBlocks[right].Length;
        while (left < right && emptyLength < fileLength)
        {
            if (!IsEmpty(fileBlocks[left]))
            {
                left++;
                continue;
            }

            emptyLength = fileBlocks[left].Length;
            if (emptyLength < fileLength)
            {
                left++;
            }
        }

        if (left >= right)
        {
            left = 0;
            continue;
        }

        if (emptyLength > fileLength)
        {
            int[] move = fileBlocks[left][fileLength..];
            fileBlocks[left] = fileBlocks[left][..fileLength];

            (fileBlocks[left], fileBlocks[right]) = (fileBlocks[right], fileBlocks[left]);
            if (IsEmpty(fileBlocks[left + 1]))
            {
                fileBlocks[left + 1] = [.. fileBlocks[left + 1], .. move];
            }
            else fileBlocks.Insert(left + 1, move);
        }

        if (emptyLength == fileLength)
        {
            (fileBlocks[left], fileBlocks[right]) = (fileBlocks[right], fileBlocks[left]);
        }

        CleanEmptyBlocks(fileBlocks);
    }
}

 private Span<int> GetBlocksFileId(List<int[]> blocks, int fileId) => blocks.Select((arr, index) => (arr, index))
                                                                               .Where(tup => Array.TrueForAll(tup.arr, n => n == fileId))
                                                                               .Select(tup => tup.index)
                                                                               .OrderDescending()
                                                                               .ToArray();

private static void CleanEmptyBlocks(List<int[]> blocks)
{
    for (int i = 1; i < blocks.Count; i++)
    {
        if (IsEmpty(blocks[i - 1]) && IsEmpty(blocks[i]))
        {
            int[] move = blocks[i - 1];
            blocks.RemoveAt(i - 1);

            blocks[i - 1] = [.. blocks[i - 1], .. move];
        }
    }
}

fileBlocks.Display();

#!markdown

### Examples

    00...111...2...333.44.5555.6666.777.888899
    0099.111...2...333.44.5555.6666.777.8888..
    0099.1117772...333.44.5555.6666.....8888..
    0099.111777244.333....5555.6666.....8888..
    00992111777.44.333....5555.6666.....8888..

The process of updating the filesystem checksum is the same; now, this example's checksum would be 2858.

#!csharp

int[] nums = [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 3, 3, 3, 0, 4, 4, 0, 5, 5, 5, 5, 0, 6, 6, 6, 6, 0, 7, 7, 7, 0, 8, 8, 8, 8, 9, 9];

int checksum = nums.Select((item, index) => new { Item = item, Index = index }).Where(elem => elem.Item is not 0).Aggregate(0, (acc, elem) => acc + elem.Item * elem.Index);

// 

checksum.Display();
((char)(nums[6] + '0')).Display();
